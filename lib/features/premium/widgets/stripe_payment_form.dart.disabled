import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_stripe/flutter_stripe.dart';
import '../services/payment_service.dart';
import 'promo_code_input.dart';

/// Comprehensive Stripe payment form with CardField integration
class StripePaymentForm extends StatefulWidget {
  final String userId;
  final String userType;
  final String userEmail;
  final SubscriptionPricing pricing;
  final VoidCallback? onPaymentSuccess;
  final ValueChanged<String>? onPaymentError;
  final bool showPromoCode;

  const StripePaymentForm({
    super.key,
    required this.userId,
    required this.userType,
    required this.userEmail,
    required this.pricing,
    this.onPaymentSuccess,
    this.onPaymentError,
    this.showPromoCode = true,
  });

  @override
  State<StripePaymentForm> createState() => _StripePaymentFormState();
}

class _StripePaymentFormState extends State<StripePaymentForm> {
  final _formKey = GlobalKey<FormState>();
  CardFieldInputDetails? _cardFieldDetails;
  
  bool _isProcessing = false;
  String? _errorMessage;
  PromoCodeValidation? _promoValidation;
  
  bool _applePaySupported = false;
  bool _googlePaySupported = false;
  
  @override
  void initState() {
    super.initState();
    _initializePaymentMethods();
  }

  Future<void> _initializePaymentMethods() async {
    try {
      await PaymentService.initialize();
      
      final applePaySupported = await PaymentService.isApplePaySupported();
      final googlePaySupported = await PaymentService.isGooglePaySupported();
      
      setState(() {
        _applePaySupported = applePaySupported;
        _googlePaySupported = googlePaySupported;
      });
      
      debugPrint('üí≥ Payment methods initialized');
      debugPrint('üçé Apple Pay supported: $applePaySupported');
      debugPrint('ü§ñ Google Pay supported: $googlePaySupported');
    } catch (e) {
      debugPrint('‚ùå Error initializing payment methods: $e');
      setState(() {
        _errorMessage = 'Unable to initialize payment system. Please try again.';
      });
    }
  }

  double get _finalAmount {
    return PaymentService.calculateFinalAmount(widget.pricing.amount, _promoValidation);
  }

  Future<void> _processCardPayment() async {
    if (!_formKey.currentState!.validate() || _cardFieldDetails == null) {
      setState(() {
        _errorMessage = 'Please enter valid card details';
      });
      return;
    }

    setState(() {
      _isProcessing = true;
      _errorMessage = null;
    });

    try {
      debugPrint('üí≥ Processing card payment...');
      
      // Create payment intent
      final paymentIntent = await PaymentService.createPaymentIntent(
        priceId: widget.pricing.priceId,
        customerEmail: widget.userEmail,
        userId: widget.userId,
        userType: widget.userType,
        promoCode: _promoValidation?.isValid == true ? 'APPLIED_CODE' : null,
      );

      // Create payment method data
      final paymentMethodData = PaymentMethodData.fromCard(
        CardPaymentMethodParams(
          billingDetails: BillingDetails(
            email: widget.userEmail,
          ),
        ),
      );

      // Confirm payment
      final confirmedPayment = await PaymentService.confirmPayment(
        clientSecret: paymentIntent.clientSecret,
        paymentMethodData: paymentMethodData,
      );

      if (confirmedPayment.status == PaymentIntentsStatus.Succeeded) {
        debugPrint('‚úÖ Payment successful');
        widget.onPaymentSuccess?.call();
      } else {
        throw PaymentException('Payment was not completed successfully');
      }
    } catch (e) {
      debugPrint('‚ùå Payment failed: $e');
      final errorMessage = e is PaymentException ? e.message : 'Payment failed. Please try again.';
      setState(() {
        _errorMessage = errorMessage;
      });
      widget.onPaymentError?.call(errorMessage);
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  Future<void> _processApplePayPayment() async {
    setState(() {
      _isProcessing = true;
      _errorMessage = null;
    });

    try {
      debugPrint('üçé Processing Apple Pay payment...');
      
      // Create payment intent
      final paymentIntent = await PaymentService.createPaymentIntent(
        priceId: widget.pricing.priceId,
        customerEmail: widget.userEmail,
        userId: widget.userId,
        userType: widget.userType,
        promoCode: _promoValidation?.isValid == true ? 'APPLIED_CODE' : null,
      );

      // Create Apple Pay payment method
      final paymentMethod = await PaymentService.createApplePayPaymentMethod(
        amount: _finalAmount,
        currency: widget.pricing.currency.toLowerCase(),
        countryCode: 'US',
      );

      // Confirm payment
      final confirmedPayment = await PaymentService.confirmPayment(
        clientSecret: paymentIntent.clientSecret,
        paymentMethodData: PaymentMethodData.fromCard(
          CardPaymentMethodParams(
            paymentMethodData: PaymentMethodDataType.fromId(paymentMethod.id),
          ),
        ),
      );

      if (confirmedPayment.status == PaymentIntentsStatus.Succeeded) {
        debugPrint('‚úÖ Apple Pay payment successful');
        widget.onPaymentSuccess?.call();
      } else {
        throw PaymentException('Apple Pay payment was not completed successfully');
      }
    } catch (e) {
      debugPrint('‚ùå Apple Pay payment failed: $e');
      final errorMessage = e is PaymentException ? e.message : 'Apple Pay payment failed. Please try again.';
      setState(() {
        _errorMessage = errorMessage;
      });
      widget.onPaymentError?.call(errorMessage);
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  Future<void> _processGooglePayPayment() async {
    setState(() {
      _isProcessing = true;
      _errorMessage = null;
    });

    try {
      debugPrint('ü§ñ Processing Google Pay payment...');
      
      // Create payment intent
      final paymentIntent = await PaymentService.createPaymentIntent(
        priceId: widget.pricing.priceId,
        customerEmail: widget.userEmail,
        userId: widget.userId,
        userType: widget.userType,
        promoCode: _promoValidation?.isValid == true ? 'APPLIED_CODE' : null,
      );

      // Create Google Pay payment method
      final paymentMethod = await PaymentService.createGooglePayPaymentMethod(
        amount: _finalAmount,
        currency: widget.pricing.currency.toLowerCase(),
        countryCode: 'US',
      );

      // Confirm payment
      final confirmedPayment = await PaymentService.confirmPayment(
        clientSecret: paymentIntent.clientSecret,
        paymentMethodData: PaymentMethodData.fromCard(
          CardPaymentMethodParams(
            paymentMethodData: PaymentMethodDataType.fromId(paymentMethod.id),
          ),
        ),
      );

      if (confirmedPayment.status == PaymentIntentsStatus.Succeeded) {
        debugPrint('‚úÖ Google Pay payment successful');
        widget.onPaymentSuccess?.call();
      } else {
        throw PaymentException('Google Pay payment was not completed successfully');
      }
    } catch (e) {
      debugPrint('‚ùå Google Pay payment failed: $e');
      final errorMessage = e is PaymentException ? e.message : 'Google Pay payment failed. Please try again.';
      setState(() {
        _errorMessage = errorMessage;
      });
      widget.onPaymentError?.call(errorMessage);
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  Widget _buildDigitalWalletButtons() {
    if (!_applePaySupported && !_googlePaySupported) {
      return const SizedBox.shrink();
    }

    return Column(
      children: [
        if (_applePaySupported)
          SizedBox(
            width: double.infinity,
            height: 48,
            child: ApplePayButton(
              onPressed: _isProcessing ? null : _processApplePayPayment,
              width: double.infinity,
              height: 48,
              style: ApplePayButtonStyle.black,
              type: ApplePayButtonType.subscribe,
              margin: const EdgeInsets.only(bottom: 8),
            ),
          ),
        if (_googlePaySupported)
          SizedBox(
            width: double.infinity,
            height: 48,
            child: GooglePayButton(
              onPressed: _isProcessing ? null : _processGooglePayPayment,
              width: double.infinity,
              height: 48,
              style: GooglePayButtonStyle.black,
              type: GooglePayButtonType.subscribe,
              margin: const EdgeInsets.only(bottom: 16),
            ),
          ),
        if (_applePaySupported || _googlePaySupported) ...[
          Row(
            children: [
              Expanded(child: Divider(color: Colors.grey.shade300)),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Text(
                  'OR',
                  style: TextStyle(
                    color: Colors.grey.shade600,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Expanded(child: Divider(color: Colors.grey.shade300)),
            ],
          ),
          const SizedBox(height: 16),
        ],
      ],
    );
  }

  Widget _buildCardForm() {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Card Information',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 12),
          Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey.shade300),
              color: Colors.white,
            ),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
            child: CardField(
              onCardChanged: (details) {
                setState(() {
                  _cardFieldDetails = details;
                });
              },
              enablePostalCode: true,
              postalCodeHint: 'ZIP Code',
              decoration: const InputDecoration(
                border: InputBorder.none,
                hintText: 'Card number',
              ),
              style: const CardFieldStyle(
                borderRadius: 12,
                borderColor: Colors.transparent,
                borderWidth: 0,
              ),
            ),
          ),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.security,
                  color: Colors.blue.shade600,
                  size: 20,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Your payment information is encrypted and secure. We never store your card details.',
                    style: TextStyle(
                      color: Colors.blue.shade700,
                      fontSize: 13,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderSummary() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Order Summary',
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Plan:',
                style: TextStyle(color: Colors.grey.shade600),
              ),
              Text(
                widget.pricing.name,
                style: const TextStyle(fontWeight: FontWeight.w500),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Billing:',
                style: TextStyle(color: Colors.grey.shade600),
              ),
              Text(
                'Monthly',
                style: const TextStyle(fontWeight: FontWeight.w500),
              ),
            ],
          ),
          const SizedBox(height: 16),
          if (_promoValidation?.isValid == true)
            DiscountSummaryWidget(
              promoValidation: _promoValidation,
              originalAmount: widget.pricing.amount,
            )
          else ...[
            const Divider(),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Total:',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  '\$${widget.pricing.amount.toStringAsFixed(2)}/month',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.green.shade600,
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildPayButton() {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: _isProcessing || (_cardFieldDetails?.complete != true) 
            ? null 
            : _processCardPayment,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.green,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 2,
        ),
        child: _isProcessing
            ? const SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  strokeWidth: 2,
                ),
              )
            : Text(
                'Subscribe Now - \$${_finalAmount.toStringAsFixed(2)}/month',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
      ),
    );
  }

  Widget _buildErrorMessage() {
    if (_errorMessage == null) return const SizedBox.shrink();

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.red.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red.shade200),
      ),
      child: Row(
        children: [
          Icon(Icons.error, color: Colors.red.shade600, size: 20),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              _errorMessage!,
              style: TextStyle(
                color: Colors.red.shade700,
                fontSize: 14,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTermsAndConditions() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 16),
      child: Text(
        'By subscribing, you agree to our Terms of Service and Privacy Policy. You can cancel anytime from your account settings. Your subscription will auto-renew monthly.',
        style: TextStyle(
          color: Colors.grey.shade600,
          fontSize: 12,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Complete Your Subscription',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),
          _buildOrderSummary(),
          const SizedBox(height: 24),
          if (widget.showPromoCode) ...[
            PromoCodeInput(
              onPromoCodeValidated: (validation) {
                setState(() {
                  _promoValidation = validation;
                });
              },
              enabled: !_isProcessing,
            ),
            const SizedBox(height: 24),
          ],
          _buildErrorMessage(),
          _buildDigitalWalletButtons(),
          _buildCardForm(),
          const SizedBox(height: 24),
          _buildPayButton(),
          _buildTermsAndConditions(),
        ],
      ),
    );
  }
}