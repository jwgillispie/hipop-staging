import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../services/payment_service.dart';

/// Widget for promo code input and validation
class PromoCodeInput extends StatefulWidget {
  final String? initialPromoCode;
  final ValueChanged<PromoCodeValidation?> onPromoCodeValidated;
  final bool enabled;

  const PromoCodeInput({
    super.key,
    this.initialPromoCode,
    required this.onPromoCodeValidated,
    this.enabled = true,
  });

  @override
  State<PromoCodeInput> createState() => _PromoCodeInputState();
}

class _PromoCodeInputState extends State<PromoCodeInput> {
  late TextEditingController _controller;
  late FocusNode _focusNode;
  
  bool _isValidating = false;
  PromoCodeValidation? _currentValidation;
  String? _lastValidatedCode;

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController(text: widget.initialPromoCode);
    _focusNode = FocusNode();
    
    if (widget.initialPromoCode != null && widget.initialPromoCode!.isNotEmpty) {
      _validatePromoCode(widget.initialPromoCode!);
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  Future<void> _validatePromoCode(String code) async {
    if (code.isEmpty) {
      setState(() {
        _currentValidation = null;
        _lastValidatedCode = null;
      });
      widget.onPromoCodeValidated(null);
      return;
    }

    if (code == _lastValidatedCode) {
      // Already validated this code
      return;
    }

    setState(() {
      _isValidating = true;
    });

    try {
      final validation = await PaymentService.validatePromoCode(code);
      
      setState(() {
        _currentValidation = validation;
        _lastValidatedCode = code;
        _isValidating = false;
      });
      
      widget.onPromoCodeValidated(validation);
    } catch (e) {
      setState(() {
        _currentValidation = PromoCodeValidation(
          isValid: false,
          errorMessage: 'Unable to validate promo code',
        );
        _lastValidatedCode = code;
        _isValidating = false;
      });
      
      widget.onPromoCodeValidated(_currentValidation);
    }
  }

  void _clearPromoCode() {
    _controller.clear();
    setState(() {
      _currentValidation = null;
      _lastValidatedCode = null;
    });
    widget.onPromoCodeValidated(null);
  }

  Color _getBorderColor() {
    if (!widget.enabled) return Colors.grey.shade300;
    if (_isValidating) return Colors.blue;
    if (_currentValidation == null) return Colors.grey.shade300;
    return _currentValidation!.isValid ? Colors.green : Colors.red;
  }

  Widget _buildValidationIcon() {
    if (_isValidating) {
      return const SizedBox(
        width: 16,
        height: 16,
        child: CircularProgressIndicator(
          strokeWidth: 2,
          valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
        ),
      );
    }

    if (_currentValidation == null) {
      return const SizedBox.shrink();
    }

    return Icon(
      _currentValidation!.isValid ? Icons.check_circle : Icons.error,
      color: _currentValidation!.isValid ? Colors.green : Colors.red,
      size: 16,
    );
  }

  Widget? _buildValidationMessage() {
    if (_currentValidation == null) return null;

    final message = _currentValidation!.isValid 
        ? _currentValidation!.description ?? 'Promo code applied successfully!'
        : _currentValidation!.errorMessage ?? 'Invalid promo code';

    return Container(
      margin: const EdgeInsets.only(top: 8),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: _currentValidation!.isValid 
            ? Colors.green.shade50 
            : Colors.red.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: _currentValidation!.isValid 
              ? Colors.green.shade200 
              : Colors.red.shade200,
        ),
      ),
      child: Row(
        children: [
          Icon(
            _currentValidation!.isValid ? Icons.check_circle : Icons.error,
            color: _currentValidation!.isValid ? Colors.green.shade600 : Colors.red.shade600,
            size: 16,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              message,
              style: TextStyle(
                color: _currentValidation!.isValid ? Colors.green.shade700 : Colors.red.shade700,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          if (_currentValidation!.isValid) ...[
            const SizedBox(width: 8),
            _buildDiscountBadge(),
          ],
        ],
      ),
    );
  }

  Widget _buildDiscountBadge() {
    if (_currentValidation?.discountPercent != null) {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.green.shade600,
          borderRadius: BorderRadius.circular(4),
        ),
        child: Text(
          '${_currentValidation!.discountPercent!.toInt()}% OFF',
          style: const TextStyle(
            color: Colors.white,
            fontSize: 10,
            fontWeight: FontWeight.bold,
          ),
        ),
      );
    }

    if (_currentValidation?.discountAmount != null) {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.green.shade600,
          borderRadius: BorderRadius.circular(4),
        ),
        child: Text(
          '\$${_currentValidation!.discountAmount!.toStringAsFixed(2)} OFF',
          style: const TextStyle(
            color: Colors.white,
            fontSize: 10,
            fontWeight: FontWeight.bold,
          ),
        ),
      );
    }

    return const SizedBox.shrink();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Text(
              'Promo Code',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(width: 8),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Text(
                'OPTIONAL',
                style: TextStyle(
                  color: Colors.blue.shade600,
                  fontSize: 10,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: _getBorderColor(), width: 2),
            color: widget.enabled ? Colors.white : Colors.grey.shade50,
          ),
          child: Row(
            children: [
              Expanded(
                child: TextFormField(
                  controller: _controller,
                  focusNode: _focusNode,
                  enabled: widget.enabled,
                  decoration: const InputDecoration(
                    hintText: 'Enter promo code',
                    border: InputBorder.none,
                    contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  ),
                  textCapitalization: TextCapitalization.characters,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'[A-Z0-9]')),
                    LengthLimitingTextInputFormatter(20),
                  ],
                  onChanged: (value) {
                    // Debounce validation to avoid too many API calls
                    Future.delayed(const Duration(milliseconds: 500), () {
                      if (_controller.text == value) {
                        _validatePromoCode(value.trim().toUpperCase());
                      }
                    });
                  },
                  onFieldSubmitted: (value) {
                    _validatePromoCode(value.trim().toUpperCase());
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(right: 12),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _buildValidationIcon(),
                    if (_controller.text.isNotEmpty && widget.enabled) ...[
                      const SizedBox(width: 8),
                      GestureDetector(
                        onTap: _clearPromoCode,
                        child: Icon(
                          Icons.clear,
                          color: Colors.grey.shade600,
                          size: 20,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ],
          ),
        ),
        if (_buildValidationMessage() != null) _buildValidationMessage()!,
      ],
    );
  }
}

/// Widget to display applied discount in order summary
class DiscountSummaryWidget extends StatelessWidget {
  final PromoCodeValidation? promoValidation;
  final double originalAmount;

  const DiscountSummaryWidget({
    super.key,
    required this.promoValidation,
    required this.originalAmount,
  });

  @override
  Widget build(BuildContext context) {
    if (promoValidation == null || !promoValidation!.isValid) {
      return const SizedBox.shrink();
    }

    final discountAmount = _calculateDiscountAmount();
    final finalAmount = originalAmount - discountAmount;

    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Subtotal:',
              style: TextStyle(
                color: Colors.grey.shade600,
                fontSize: 14,
              ),
            ),
            Text(
              '\$${originalAmount.toStringAsFixed(2)}',
              style: TextStyle(
                color: Colors.grey.shade600,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 4),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Row(
              children: [
                Text(
                  'Discount:',
                  style: TextStyle(
                    color: Colors.green.shade600,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(width: 4),
                if (promoValidation!.discountPercent != null)
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.green.shade100,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      '${promoValidation!.discountPercent!.toInt()}%',
                      style: TextStyle(
                        color: Colors.green.shade700,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
              ],
            ),
            Text(
              '-\$${discountAmount.toStringAsFixed(2)}',
              style: TextStyle(
                color: Colors.green.shade600,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        const Divider(),
        const SizedBox(height: 8),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Total:',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              '\$${finalAmount.toStringAsFixed(2)}',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.green.shade600,
              ),
            ),
          ],
        ),
      ],
    );
  }

  double _calculateDiscountAmount() {
    if (promoValidation?.discountAmount != null) {
      return promoValidation!.discountAmount!.clamp(0.0, originalAmount);
    }

    if (promoValidation?.discountPercent != null) {
      return (originalAmount * (promoValidation!.discountPercent! / 100))
          .clamp(0.0, originalAmount);
    }

    return 0.0;
  }
}